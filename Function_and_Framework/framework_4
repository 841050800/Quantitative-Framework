# 改进一下
#1. 增加做空,认为如果卖到负数那就认为是0
#2. 增加总资产的计算

class Strategy_4():
    
    def __init__(self):
        
        self.index = 0 
        self.data_all = []
        
    def set_account(self,capital=10000000,commission=0.0002,slippage=0.0002):
        
        self.capital_base = capital
        self.commission = commission
        self.slippage = slippage                   #滑点的计算方法应该可以和其他函数相关，之后可以修改
        
    def set_para(self,freq='day',start='1991-01-01',end=today,fq='qfq',allowshort=True):
        
        self.start = start
        self.end = end
        self.freq = freq
        self.fq = fq
        self.allowshort = allowshort
        data = get_k_data('index000001', self.start, self.end, self.freq, self.fq)
        self.len = len(data)                                                            #获取总长度的区间，但其实也可以不用提前获取
        #self.portfolio[self.code] = 0
        
    def set_universe(self,universe_list):
        
        self.universe = universe_list             #这里要额外定义一个get_index_universise，用以获取指数成分股列表
        self.portfolio = pd.DataFrame(columns=self.universe)
        for item in self.universe:                #提前把所有数据都获取了会不会更快点？
            self.data_all.append(get_k_data(item, self.start, self.end, self.freq, self.fq))
    
    def set_benchmark(self,benchmark='index000300'):
        self.benchmark = benchmark
        self.benchmark_data = self.get_k_data(self.benchmark, self.freq, self.start, self.end, self.fq)
    
    def handle_data(self):
        
        #首先获取数据，利用Get_data.py里的函数
        #code 使用循环时候获取的self.code
        
        for i in range(len(self.universe)):
            self.code = self.universe[i]
            self.data = self.data_all[i][:self.index+1]
        
            #这里其实要改进啊，如果循环的时候每天都获取一次全部数据，再全部计算，实际上很消耗时间和空间
            #应该把self.end设置成根据self.index移动的，或者就直接利用self.index，因此需要再写一个函数

            #根据自己的策略来进行操作，self.index用来循环表示回测窗口
            #这里还没能把self.index取代掉，实际使用的时候应该最好把self.index去掉

            '''
            signal = 1 
            '''
            df2 = self.data.copy()
            df2 = taf.MACD(df2)
            if df2.at[self.index,'MACDdiff_12_26'] > 0:
                self.Order_buy(100)
            elif df2.at[self.index,'MACDdiff_12_26'] < 0:
                self.Order_sell(100)
            else:
                self.Remain()
            # self.Order_buy(amount)
            # self.Order_to()
            '''
            signal = 0 
            '''
            # self.Order_sell()
            # self.Order_to()

    def Order_buy(self,amount):
        
        #还没有加判断条件，比如钱够不够，暂时不考虑这种情况
        #如果不能做空，可能还要考虑pofolio的仓位
        
        self.capital_base = self.capital_base - amount * self.data.close[self.index] * (1 + self.commission + self.slippage)       
        
        if self.index == 0:
            self.portfolio.loc[self.data.date[self.index], self.code] = amount 
        else:
            self.portfolio.loc[self.data.date[self.index], self.code] = self.portfolio.loc[self.data.date[self.index-1], self.code] + amount 
        
    def Order_sell(self,amount):
        
        if self.allowshort == True:
            self.capital_base = self.capital_base + amount * self.data.close[self.index]   
            self.portfolio.loc[self.data.date[self.index], self.code] = self.portfolio.loc[self.data.date[self.index-1], self.code] - amount 
        else:
            if self.portfolio.loc[self.data.date[self.index-1], self.code] - amount >= 0:
                self.capital_base = self.capital_base + amount * self.data.close[self.index]   
                self.portfolio.loc[self.data.date[self.index], self.code] = self.portfolio.loc[self.data.date[self.index-1], self.code] - amount 
            if self.portfolio.loc[self.data.date[self.index-1], self.code] - amount < 0:     #不允许做空就全部卖完
                self.capital_base = self.capital_base + self.portfolio.loc[self.data.date[self.index-1], self.code] *      self.data.close[self.index]
                self.portfolio.loc[self.data.date[self.index], self.code] = 0 
                
    def Remain(self):
        
        if self.index == 0:
            self.portfolio.loc[self.data.date[self.index], self.code] = 0
        else:
            self.portfolio.loc[self.data.date[self.index], self.code] = self.portfolio.loc[self.data.date[self.index-1], self.code]
    
    def Order_to(self,amount):
        
        if (self.allowshort == False) & (amount < 0):                 #如果不允许做空，那就把amount调整成0
            amount = 0 
            
        if amount > self.portfolio.loc[self.data.date[self.index-1], self.code]:
            self.capital_base = self.capital_base - (amount-self.portfolio.loc[self.data.date[self.index-1], self.code]) *     self.data.close[self.index] * (1 + self.commission + self.slippage)
        else:
            self.capital_base = self.capital_base + (self.portfolio.loc[self.data.date[self.index-1], self.code]-amount) *        self.data.close[self.index]      
            
        self.portfolio.loc[self.data.date[self.index], self.code] == amount
    
    def run(self):                         
        
        start = time.clock()
        money = []                         #设置账户资产总额
   
        while self.index < self.len:    #从第一天开始    这里self.data要重新开始
            
            self.handle_data()             #是否进行该股票的买卖

            money.append(self.capital_base) #先不计算总的账户资产额度（没有增加市值)

            self.index += 1 

        self.money = pd.Series(money)
        end = time.clock()
        print('Running time: %s Seconds'%(end-start))
        
    def evaluate_strategy(self):
        
        self.money = pd.Series(self.money,name='money')
        self.portfolio.reset_index(inplace=True)
        self.capital_all = self.money
        index_list = self.data_all[0].index
        
        length = len(self.universe)
        for i in range(length):
            self.capital_all += self.portfolio[self.universe[i]] * self.data_all[i]['close']
        
        date_list = self.data_all[0].date
        es.get_return(self.capital_all,index_list)
        
if __name__ == '__main__':
    MACD = Strategy_4()
    MACD.set_account()
    MACD.set_para(freq='day',start='2018-01-01',end='2020-01-01',fq='qfq',allowshort=False)
    MACD.set_universe(['000001','000002'])
    MACD.run()
    MACD.evaluate_strategy()
