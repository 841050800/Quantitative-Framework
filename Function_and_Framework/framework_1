import pandas as pd  
import numpy as np
import matplotlib.pyplot as plt
from pylab import mpl
from K_draw import *
import tafunction as taf
import math
import os
import datetime
from Get_data import *
import evaluate_strategy as es 

plt.rcParams['font.sans-serif']=['SimHei']
plt.rcParams['axes.unicode_minus'] = False

today = str(datetime.datetime.now().year) + '-' + str(datetime.datetime.now().month) + '-' + str(datetime.datetime.now().day)
#另一种写法 import time   
#today=time.strftime('%Y-%m-%d',time.localtime(time.time()))


# 关于策略的class

class Strategy():
    
    def __init__(self):
        
        self.index = 0 
        
        
    def set_account(self,capital=10000000,commission=0.0002,slippage=0.0002):
        
        self.capital_base = capital
        self.commission = commission
        self.slippage = slippage                   #滑点的计算方法应该可以和其他函数相关，之后可以修改
        self.portfolio = {}
    

    
    def get_k_data(self,code,freq='day',start='1991-01-01',end=today,fq='qfq'):
        
        self.code = code                            #暂且先只支持一个code，之后再改
        self.start = start
        self.end = end
        self.freq = freq
        self.portfolio[self.code] = 0
        self.fq = fq
        
        if freq not in ['day','month','week']:
            raise Exception('Wrong freq input! freq should be one of \[\'day\',\'month\',\'week\'\]')

        if fq not in ['qfq','hfq','none']:
            raise Exception('Wrong fq input! fq should be one of \[\'qfq\',\'hfq\',\'none\'\]:')

        if start < '1991-01-01' or end > today:
            raise Exception('Please check startday or endday')

        if fq == 'qfq':
            data = pd.read_csv('D:\\stock_data\\xbdata\\xbdata\\'+freq+'\\'+code+'.csv')

        if fq == 'hfq' or fq == 'none':
            data = pd.read_csv('D:\\stock_data\\xbdata\\xbdata\\'+freq+'\\'+fq+'\\'+code+'.csv')

        df = data[(data.date>start) & (data.date<end)]
        del df[df.columns[0]]
        df['return'] = df['close'].pct_change()

        self.data = df
        self.index_list = self.data.index
        
    
    def set_benchmark(self,benchmark='index000300'):
        self.benchmark = benchmark
        self.benchmark_data = self.get_k_data(benchmark,self.code,self.freq,self.start,self.end,self.fq)
    
    def handle_data(self):
        
        '''
        signal = 1 
        '''
        df2 = self.data.copy()
        df2 = taf.MACD(df2)
        if df2.at[self.index,'MACDdiff_12_26'] > 0:
            self.Order_buy(100)
        if df2.at[self.index,'MACDdiff_12_26'] < 0:
            self.Order_sell(100)
        
        # self.Order_buy(amount)
        # self.Order_to()
        '''
        signal = 0 
        '''
        # self.Order_sell()
        # self.Order_to()
    
    def Order_buy(self,amount):
        
        #还没有加判断条件，比如钱够不够
        #如果不能做空，可能还要考虑pofolio的仓位
        
        self.capital_base = self.capital_base - amount * self.data.close[self.index]       
        self.portfolio[self.code] += amount 
    
    def Order_sell(self,amount):

        self.capital_base = self.capital_base + amount * self.data.close[self.index]       
        self.portfolio[self.code] -= amount 
        
    def Order_to(self,amount):
        
        self.capital_base = self.capital_base - (amount-self.portfolio[self.code]) * self.data.close[self.index]
        self.portfolio[self.code] == amount
    
    def run(self):
        
        money = []
        date_and_hold = {}
        
        while self.index < len(self.data):
            
            self.handle_data()
            
            money.append(self.capital_base + self.portfolio[self.code] * self.data.close[self.index])
            date_and_hold[self.data.date[self.index]]=self.portfolio[self.code]
                          
            self.index += 1 
        
        self.money = pd.Series(money)
        self.hold = date_and_hold
    
    def evaluate_strategy(self):
        
        date_list = self.data.date
        es.get_return(self.money,self.index_list)


Test = Strategy()
Test.set_account()
Test.get_k_data('002345')
Test.run()
pd.Series(Test.money).plot(figsize=(20,8))
Test.data.close.plot(figsize=(20,8))
# pd.DataFrame(Test.hold,index=[0]).T
Test.evaluate_strategy()
